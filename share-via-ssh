#!/usr/bin/env python3

import argparse
import configparser
import datetime
import os
import path
import random
import re
import shlex
import subprocess
import sys
import textwrap
import urllib.parse


__version__ = '0.1.1'


def main(arglist):

    # Parse command line arguments
    parser = argparse.ArgumentParser('share-via-ssh')
    parser.add_argument('path_strs', metavar='FILE', nargs='+',
        help='paths to files and/or directories to upload')
    parser.add_argument('-c', '--config', metavar='...',
        help='config file path')
    parser.add_argument('-g', '--group', metavar='...',
        help='existing directory to upload files to')
    parser.add_argument('-e', '--expire', metavar='...',
        help='expiration time (e.g. 15m, 1h, 1d, 2w, 2015-12-24 18:00, tomorrow)')
    parser.add_argument('--dry-run', action='store_true',
        help='do not actually upload anything')
    args = parser.parse_args(arglist)

    # Check group name
    if args.group and ('/' in args.group or args.group in ('.', '..')):
        print('error: bad group name: %s' % args.group, file=sys.stderr)
        sys.exit(1)

    # Parse expiration date
    if args.expire is not None:
        try:
            args.expire = parse_expiration(args.expire)
        except ExpirationParseError as e:
            print('error: %s' % e, file=sys.stderr)
            sys.exit(1)

    # Load config file(s)
    config = configparser.ConfigParser()
    if args.config:
        config_path_obj = path.path(args.config)
        if not config_path_obj.isfile():
            print('error: no such config file: %s' % config_path_obj, file=sys.stderr)
            sys.exit(1)
        config.read([args.config])
    else:
        config_path_objs = [path.path(s).expand() for s in [
            '~/.config/share-via-ssh.conf',
            '~/.share-via-ssh.conf'
        ]]
        if not config.read(config_path_objs):
            print('error: found no config file in any of the following locations:', file=sys.stderr)
            print(file=sys.stderr)
            for config_path_obj in config_path_objs:
                print('- %s' % config_path_obj)
            sys.exit(1)

    # Check config file and extract settings
    if 'share-via-ssh' not in config:
        print('error: no [share-via-ssh] section in config file', file=sys.stderr)
        sys.exit(1)
    if 'host' not in config['share-via-ssh']:
        print('error: no "host" setting in config file', file=sys.stderr)
        sys.exit(1)
    host = config['share-via-ssh']['host']
    if 'base_dir' not in config['share-via-ssh']:
        print('error: no "base_dir" setting in config file', file=sys.stderr)
        sys.exit(1)
    base_dir = config['share-via-ssh']['base_dir']
    if 'base_url' not in config['share-via-ssh']:
        print('error: no "base_url" setting in config file', file=sys.stderr)
        sys.exit(1)
    base_url = config['share-via-ssh']['base_url']
    if 'expire' in config['share-via-ssh']:
        default_expire = config['share-via-ssh']['expire']
        try:
            default_expire = parse_expiration(default_expire)
        except ExpirationParseError as e:
            print('error in config file: %s' % e, file=sys.stderr)
            sys.exit(1)
        if args.expire is None:
            args.expire = default_expire

    # Check paths
    path_objs = []
    for path_str in args.path_strs:
        path_obj = path.path(path_str).expand()
        if not path_obj.exists():
            print('error: file or directory doesn\'t exist: %s' % path_obj, file=sys.stderr)
            sys.exit(1)
        if path_obj.name in ('.htaccess', '.htpasswd'):
            print('error: refusing to upload .htaccess/.htpasswd')
            sys.exit(1)
        path_objs.append(path_obj)

    # Create group directory on server, if necessary
    group = args.group
    if not group:
        rnd = random.SystemRandom()
        group = "".join(rnd.choice("abcdefghijkmnpqrstuvwxyz23456789") for i in range(12))
        group_dir = os.path.join(base_dir, group) + "/"
        command = ['ssh', '-q', host, 'mkdir', group_dir]
        if args.dry_run:
            print(" ".join(map(shlex.quote, command)))
        else:
            subprocess.check_call(command)
    else:
        group_dir = os.path.join(base_dir, group) + "/"

    # Create .htaccess file with expiration date
    if args.expire:
        htaccess_path = os.path.join(group_dir, ".htaccess")
        htaccess_text = textwrap.dedent("""\
            RewriteEngine on
            RewriteCond %%{TIME} >%s
            RewriteRule "(.*)" "-" [G]
        """).replace("\n", "\\n") % args.expire.strftime("%Y%m%d%H%M%S")
        command = "echo %s > %s" % (shlex.quote(htaccess_text), htaccess_path)
        command = ['ssh', '-q', host, 'sh', '-c', shlex.quote(command)]
        if args.dry_run:
            print(" ".join(map(shlex.quote, command)))
        else:
            subprocess.check_call(command)

    # Copy files to server
    source_file_strs = []
    for path_obj in path_objs:
        source_file_strs.append(str(path_obj).replace(":", "\\:"))
    command = ['scp', '-q', '-r'] + source_file_strs + [host + ':' + group_dir]
    if args.dry_run:
        print(" ".join(map(shlex.quote, command)))
    else:
        subprocess.check_call(command)

    # Change permissions
    command = ['ssh', '-q', host, 'chmod', '-R', 'a+rX', group_dir]
    if args.dry_run:
        print(" ".join(map(shlex.quote, command)))
    else:
        subprocess.check_call(command)

    # Show report
    group_url = base_url + group + "/"
    for path_obj in path_objs:
        print(group_url + urllib.parse.quote(str(path_obj.name)))
    print()
    print("Directory:  \x1b[1m%s \x1b[0m" % group_url)
    print("Add files:  \x1b[1mshare-via-ssh --group=%s\x1b[0m" % group)
    if args.expire:
        print("Expires:    %s" % args.expire.strftime("%a, %Y-%m-%d %H:%M:%M"))


class ExpirationParseError(Exception):
    pass


def parse_expiration(string, _now=None):
    now = _now or datetime.datetime.today()

    # Check for keywords
    patterns = {
        "never": None,
        "none": None,
        "": None,
        "now": now,
        "today": datetime.datetime.combine(now.date(), datetime.time(23, 59, 59)),
        "tomorrow": datetime.datetime.combine(
            now.date() + datetime.timedelta(days=1), datetime.time(23, 59, 59)),
    }
    for pattern, expiration in patterns.items():
        if string == pattern:
            return expiration

    # Try parsing it as an absolute date/time
    # (like "2015-12-24", "2015-12-24 18:00", "18:00")
    patterns = {
        "%Y%m%d%H%M%S": lambda dt: dt,
        "%Y-%m-%d %H:%M:%S": lambda dt: dt,
        "%Y-%m-%d %H:%M": lambda dt: dt,
        "%Y-%m-%d %H": lambda dt: dt,
        "%Y-%m-%d": lambda dt: dt,
        "%Y-%m": lambda dt: dt,
        "%Y": lambda dt: dt,
        "%H:%M:%S": lambda dt: datetime.datetime.combine(now.date(), dt.time()),
        "%H:%M": lambda dt: datetime.datetime.combine(now.date(), dt.time()),
        "%H": lambda dt: datetime.datetime.combine(now.date(), dt.time()),
    }
    for pattern, convert in patterns.items():
        try:
            match = datetime.datetime.strptime(string, pattern)
        except ValueError:
            continue
        else:
            return convert(match)

    # Try parsing it as a relative date
    # (like "3h", "3h15m", "3h 15m", "1week")
    expiration = now
    patterns = {
        r"(\d+) ?(?:s|secs?|seconds?)": datetime.timedelta(seconds=1),
        r"(\d+) ?(?:m|mins?|minutes?)": datetime.timedelta(minutes=1),
        r"(\d+) ?(?:h|hrs?|hours?)": datetime.timedelta(hours=1),
        r"(\d+) ?(?:d|days?)": datetime.timedelta(days=1),
        r"(\d+) ?(?:w|wks?|weeks?)": datetime.timedelta(weeks=1),
    }
    found_one = False
    for pattern, multiplier in patterns.items():
        for match in re.compile(pattern).findall(string):
            expiration += int(match) * multiplier
            found_one = True
    if found_one:
        return expiration

    # None of the above methods worked
    raise ExpirationParseError("couldn't parse expiration date: %s" % string)


if __name__ == '__main__':
    main(sys.argv[1:])

